#!/usr/bin/env python
PACKAGE = "leopard_imaging_camera"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("cluster_size_min",    int_t,    0, "clustrers of size less than cluster_size_min will be ignored (filtered in voxel filtering)", 20,  0, 200)
gen.add("cluster_size_max",    int_t,    0, "clusters of size greater than cluster_size_max will be ignored (filtered in voxel filtering)", 25000,  100, 25000)
gen.add("voxel_leaf_size", double_t, 0, "side length of each filtered cube. larger values sample PCD less",    .02, .01,   0.25)
gen.add("cluster_tolerance", double_t, 0, "spacing between clusters must be greater than cluster_tolerance for it to be its own cluster. larger means nearby clusters will be merged into one large cluster", .02, .01,   0.25)
#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("use_voxel_filter",   bool_t,   0, "Toggle the voxel filter on or off",  True)
gen.add("use_ROI",   bool_t,   0, "Filters out all points outside a cube centered at the copter",  True)
gen.add("use_classifier",   bool_t,   0, "Toggle cascade classifier. Filters out false positives by comparing each candidate against a trained copter model",  True)
roiType_enum = gen.enum([ gen.const("ROI_Static",      int_t, 0, "When copter is not found, roi is not applied"),
                       gen.const("ROI_Dynamic",     int_t, 1, "When copter is not found, ROI grows larger")],
                     "An enum to set ROI type")
gen.add("roiType", int_t, 0, "roiType enum", 1, 0, 1, edit_method=roiType_enum)

gen.add("ROI_size_multiplier", double_t, 0, "determines side length of the ROI cube",    2.25, 1.15,  10)
gen.add("ROI_size_penality_multiplier_increment", double_t, 0, "increments the ROI penality multiplier when no copter is found within the ROI",    0.2, 0,  5)

gen.add("copter_area_min", double_t, 0, "cluster areas between copter_area_min and copter_area_max are considered good copter candidates", .002, 0, 1)
gen.add("copter_area_max", double_t, 0, "cluster areas between copter_area_min and copter_area_max are considered good copter candidates", .02, 0, 1)

gen.add("stereo_min", double_t, 0, "min range of stereo cam in meters", 1, 0, 20)
gen.add("stereo_max", double_t, 0, "max range of stereo cam in meters", 10, 0, 20)

VisualizationMode_enum = gen.enum([ gen.const("AllClusters",      int_t, 0, "Each cluster is a different color"),
                       gen.const("ClusterState",     int_t, 1, "Each color represents the state it was filtered at"),
                       gen.const("VisualizationOff",     int_t, 2, "Turns visualization off to conserve processing power")],
                     "An enum to set coloring format")

gen.add("VisualizationMode", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 2, edit_method=VisualizationMode_enum)

exit(gen.generate(PACKAGE, "copterTrackerV2", "copterTrackerV2"))
